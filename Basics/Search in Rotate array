
Search in Rotate array 
ğŸ‘‰ Logic
Find mid = (low + high) / 2

Check if nums[mid] == target

Determine which half is sorted:

If nums[low] <= nums[mid], then left half is sorted.

If nums[low] <= target < nums[mid], search left.

Else search right.

Else, right half is sorted.

If nums[mid] < target <= nums[high], search right.

Else search left.


class Solution {
public:
    int search(vector<int>& nums, int target) {
        int s = 0 ;
        int e = nums.size()-1 ;

        while(s<= e)
        {   int mid = s +(e-s) /2 ;

            if(nums[mid]== target) return mid ;

            if(nums[s] <= nums[mid]) // left is sorted ;
                {
                    if(nums[s] <= target && target < nums[mid]) // present in it 
                            e = mid -1 ;
                    else s = mid  +1 ;
                }

                else{
                    if(nums[e] >= target && target > nums[mid])
                             s = mid +1 ;

                    else e = mid -1 ;
                }
        }
        return -1 ;
    }
};
