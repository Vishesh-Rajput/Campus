📌 Question
Sort an array of 0s and 1s in ascending order.
🧠 Input: [1, 1, 1, 0, 1, 1, 1]
✅ Output: [0, 1, 1, 1, 1, 1, 1]

🐢 Brute Force
🔍 Intuition:
Count total number of 0s, fill that many 0s from start, rest all 1s.

🧾 Code:
cpp
Copy
Edit
void sortBinary(vector<int>& arr) {
    int zeroCount = 0;
    for (int val : arr)
        if (val == 0) zeroCount++;

    for (int i = 0; i < arr.size(); i++)
        arr[i] = (i < zeroCount) ? 0 : 1;
}
⏱ Time: O(n)
🗃 Space: O(1)
⚡ Optimal Approach — Two Pointers
🔍 Intuition:
Use two pointers (left and right):

Swap when left is 1 and right is 0.

Move pointers based on values.

🧾 Code:
cpp
Copy
Edit
void sortBinary(vector<int>& arr) {
    int left = 0, right = arr.size() - 1;

    while (left < right) {
        if (arr[left] == 1 && arr[right] == 0) {
            swap(arr[left], arr[right]);
            left++;
            right--;
        }
        if (arr[left] == 0) left++;
        if (arr[right] == 1) right--;
    }
}
⏱ Time: O(n)
🗃 Space: O(1)
