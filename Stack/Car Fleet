Car Fleet 
There are n cars at given miles away from the starting mile 0, traveling to reach the mile target.

You are given two integer array position and speed, both of length n, where position[i] is the starting mile of the ith car and speed[i] is the speed of the ith car in miles per hour.

A car cannot pass another car, but it can catch up and then travel next to it at the speed of the slower car.

A car fleet is a car or cars driving next to each other. The speed of the car fleet is the minimum speed of any car in the fleet.

If a car catches up to a car fleet at the mile target, it will still be considered as part of the car fleet.

Return the number of car fleets that will arrive at the destination.

class Solution {
public:
    int carFleet(int target, vector<int>& position, vector<int>& speed) {
        vector<pair<int, double>> cars;

        // Step 1: Calculate time each car takes to reach the target and store it with its position
        for (int i = 0; i < position.size(); i++) {
            double time = (double)(target - position[i]) / speed[i]; // time = distance/speed
            cars.push_back({position[i], time}); // store car as a pair (position, time)
        }

        // Step 2: Sort the cars based on their starting position in ascending order
        sort(cars.begin(), cars.end());

        // Step 3: Use a stack to simulate the fleet formation
        stack<double> st;

        // Traverse from the car closest to the target to the farthest
        for (int i = position.size() - 1; i >= 0; i--) {
            double time = cars[i].second;

            // If the current car takes more time or same as the car in front (on top of stack),
            // it will catch up and join the same fleet, so we don't need a new fleet
            // Hence, pop the car in front and merge into one fleet
            while (!st.empty() && time >= st.top()) {
                st.pop();
            }

            // Push current car's time, forming a new fleet (if not merged)
            st.push(time);
        }

        // The size of the stack represents the number of distinct fleets
        return st.size();
    }
};
