Evaluate Reverse Polish Notation

Evaluate the expression. Return an integer that represents the value of the expression.

Note that:

The valid operators are '+', '-', '*', and '/'.
Each operand may be an integer or another expression.
The division between two integers always truncates toward zero.
There will not be any division by zero.
The input represents a valid arithmetic expression in a reverse polish notation.
The answer and all the intermediate calculations can be represented in a 32-bit integer.



// 
class Solution {
public:
    int evalRPN(vector<string>& t) {
        stack<int>st ;
        
        for(int i = 0 ; i<t.size() ;i++)
        {
            if(t[i] == "+" || t[i] == "-" || t[i] == "/" || t[i] == "*" )
            {
                // pop  two 
                int a = st.top();
                st.pop();
                int b = st.top();
                st.pop();

            if(t[i] == "+") st.push(a+b);
            else {
               if(t[i] == "-") st.push(b-a);
               if(t[i] == "*") st.push(b*a);
               if(t[i] == "/") st.push(b/a);
            }
            }
            else{
                st.push(stoi(t[i]));
            }
        }
        return st.top();

    }
};
