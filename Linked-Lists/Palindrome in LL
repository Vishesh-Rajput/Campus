
Palindrome in LL

class Solution {
    // Reverse a linked list
    ListNode* reverse(ListNode* head) {
        ListNode* prev = NULL;
        ListNode* curr = head;
        while (curr) {
            ListNode* forw = curr->next;
            curr->next = prev;
            prev = curr;
            curr = forw;
        }
        return prev;
    }

    // Find the middle of the list
    ListNode* mid(ListNode* head) {
        ListNode* slow = head;
        ListNode* fast = head;
        while (fast && fast->next && fast->next->next) {
            slow = slow->next;
            fast = fast->next->next;
        }
        return slow;
    }

public:
    bool isPalindrome(ListNode* head) {
        if (!head || !head->next) return true;

        // Step 1: Find the middle
        ListNode* middle = mid(head);

        // Step 2: Reverse the second half starting from middle->next
        ListNode* second = reverse(middle->next);

        // Optional: Save it to restore later
        ListNode* copySecond = second;

        // Step 3: Compare both halves
        ListNode* first = head;
        while (second) {
            if (first->val != second->val)
                return false;
            first = first->next;
            second = second->next;
        }

        // Step 4 (Optional): Restore the list
        middle->next = reverse(copySecond);

        return true;
    }
};
