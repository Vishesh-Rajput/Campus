Given an array of distinct integers candidates and a target integer target, return a list of all unique combinations of candidates where the chosen numbers sum to target. You may return the combinations in any order.

Input: candidates = [2,3,6,7], target = 7
Output: [[2,2,3],[7]]
Explanation:
2 and 3 are candidates, and 2 + 2 + 3 = 7. Note that 2 can be used multiple times.
7 is a candidate, and 7 = 7.
These are the only two combinations.


class Solution {
public:

void solve( vector<int>&arr , int t , int index , vector<vector<int>>&ans , vector<int>&ds)
{
    int n = arr.size();
    // base case 
    if(index == n )
    {
        if(t == 0)
        {
            ans.push_back(ds);
        }
            return ;
    }
    if(arr[index]<=t) // pick only if possible 
    {
        ds.push_back(arr[index]);
        solve(arr,t-arr[index],index , ans , ds);

        ds.pop_back();
    }
    // not pick case 
        solve(arr , t , index +1 , ans ,ds);
   


}
    vector<vector<int>> combinationSum(vector<int>& candidates, int target) {
        vector<vector<int>> ans ;
        vector<int>ds;
        solve(candidates , target , 0 , ans , ds);
        return ans ;

    }
};
